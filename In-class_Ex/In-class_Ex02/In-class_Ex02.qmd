---
title: "In-class Exercise 2: Data Wrangling with R"
execute:
  warning: false
date: "`r Sys.Date()`"
---

# Getting Started

```{r}
pacman::p_load(tidyverse, sf, funModeling)
```

# Importing Geospatial Data

## The geoBoundaries data set

```{r}
geoNGA <- st_read("data/geospatial/",
               layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

## The NGA data set

```{r}
NGA <- st_read("data/geospatial/",
               layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

By examining both sf dataframe closely, we notice that NGA provide both LGA and state information. Hence, NGA data.frame will be used for the subsequent processing.

# Importing Aspatial Data

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria")
```

### Converting water point data into sf point features

#### Step 1: Convert the wkt field into sfc field by using st_as_sfc() data type

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

#### Step 2: Convert tibble.data.frame into an sf object by using st_sf(). \*\*include referencing system of data into sf object

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
  wp_sf
```

### Transform into Nigeria projected coordinate system (from WGS84)

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

# Geospatial Data Cleaning

## Excluding redundant fields

### select() of dplyr (to retain column 3, 4, 8, 9)

```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9))
```

## Checking for Duplicate Name

### duplicate() of Base R (to flag out duplicated LGA names)

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

##### The printout above shows that there are 6 LGAs with the same name. A Google search using the coordinates showed that there are LGAs with the same name but are located in different states. For instances, there is a Bassa LGA in Kogi State and a Bassa LGA in Plateau State.

##### Let us correct these errors by using the code chunk below.

```{r}
NGA$ADM2_EN[94] <- "Bassa, Kogi"
NGA$ADM2_EN[95] <- "Bassa, Plateau"
NGA$ADM2_EN[304] <- "Ifelodun, Kwara"
NGA$ADM2_EN[305] <- "Ifelodun, Osun"
NGA$ADM2_EN[355] <- "Irepodun, Kwara"
NGA$ADM2_EN[356] <- "Irepodun, Osun"
NGA$ADM2_EN[519] <- "Nasarawa, Kano"
NGA$ADM2_EN[520] <- "Nasarawa, Nasarawa"
NGA$ADM2_EN[546] <- "Obi, Benue"
NGA$ADM2_EN[547] <- "Obi, Nasarawa"
NGA$ADM2_EN[693] <- "Surulere, Lagos"
NGA$ADM2_EN[694] <- "Surulere, Oyo"
```

#### Confirm that duplicated name issue address

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

# Data Wrangling for Water Point Data

### freq() of funModeling (to reveal distribution of water point statuses visually)

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```

#### 9 classes in status_clean

### rename() of dplyr package (to rename column from #status_clean to status_clean for easier handling)

### select() of dplyr package (to include status_clean in output of sf.dataframe)

### mutate() and replace_na() (to recode all NA values in status_clean into unknown)

```{r}
wp_sf_nga <- wp_sf %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

## Extracting Water Point Data

### Extracting functional water point

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

### Extracting non-functional water point

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

### Extracting water point with unknown status

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

### Perform a quick EDA on derived sf data.frames

```{r}
 freq(data = wp_functional,
     input = 'status_clean')
```

```{r}
freq(data = wp_nonfunctional,
     input = 'status_clean')
```

```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

### Performing Point-in-Polygon Count

#### Find out number of total, functional, non-functional and unknown water points in each LGA.

##### 1) st_intersects() of sf_package (identifies functional water points in each LGA)

##### 2) length() (to calculate number of functional water points that fall inside each LGA)

```{r}
NGA_wp <- NGA %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```

## Visualising attributes by using statistical graphs

### ggplot2 package (to reveal distribution of total water points by LGA in histogram)

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             linewidth=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

## Saving the analytical data in rds format

### To retain the sf object structure for subsequent analysis, it is recommended to save the sf data.frame into rds format.

#### write_rds() of readr package (to export an sf data.frame into rds format)

```{r}
write_rds(NGA_wp, "data/rds/NGA_wp.rds")
```
